#!/usr/bin/env python3
"""
AdvAI Image Generator Web Application
Flask backend server with g4f integration - Serverless Compatible
"""

import os
import asyncio
import logging
import uuid
from datetime import datetime
from typing import List, Dict, Any, Optional

# Import config for API keys with fallback
try:
    from config import POLLINATIONS_KEY
except ImportError:
    # Fallback for Vercel deployment - get from environment variables
    POLLINATIONS_KEY = os.environ.get('POLLINATIONS_KEY', '')

from flask import Flask, request, jsonify, send_from_directory, Response
from flask_cors import CORS

# Import g4f directly
import g4f
from g4f.client import Client as GPTClient, AsyncClient
from g4f.Provider import PollinationsImage

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize Flask app
app = Flask(__name__, static_folder='static')
CORS(app)

# Serverless-friendly configuration
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB

def generate_ai_response(prompt: str, model: str = "gpt-4o") -> str:
    """Generate AI response using g4f GPTClient"""
    try:
        gpt_client = GPTClient()
        history = [{"role": "user", "content": prompt}]
        
        response = gpt_client.chat.completions.create(
            api_key=POLLINATIONS_KEY,
            model=model,
            messages=history,
            provider="PollinationsAI"
        )
        return response.choices[0].message.content
    except Exception as e:
        logger.error(f"Error generating AI response: {e}")
        raise

async def generate_images_standalone(prompt: str, style: str = None, max_images: int = 1, width: int = 1024, height: int = 1024, model: str = "flux") -> tuple:
    """Generate images using g4f directly"""
    try:
        # Style definitions
        style_definitions = {
            "default": {"prompt_additions": "ultra realistic, detailed, photographic quality"},
            "photorealistic": {"prompt_additions": "photorealistic, ultra realistic, detailed, professional photography"},
            "artistic": {"prompt_additions": "artistic, creative, expressive, painterly style"},
            "anime": {"prompt_additions": "anime style, manga style, vibrant colors"},
            "cartoon": {"prompt_additions": "cartoon style, animated, colorful, stylized"},
            "digital-art": {"prompt_additions": "digital art, concept art, trending on artstation"},
            "painting": {"prompt_additions": "oil painting, traditional art, brushstrokes, artistic"},
            "sketch": {"prompt_additions": "pencil sketch, hand drawn, artistic sketch, detailed drawing"}
        }
        
        # Get style info and enhance prompt
        style_info = style_definitions.get(style or "default", style_definitions["default"])
        enhanced_prompt = f"{prompt}, {style_info['prompt_additions']}"
        
        logger.info(f"Generating {max_images} images with enhanced prompt: {enhanced_prompt[:100]}...")
        
        # Use AsyncClient with PollinationsImage provider
        async_client = AsyncClient(image_provider=PollinationsImage, api_key=POLLINATIONS_KEY)
        
        # Generate images
        response = await async_client.images.generate(
            prompt=enhanced_prompt,
            model=model,
            response_format="url",
            width=width,
            height=height,
            n=max_images,
        )
        
        # Check if response is valid
        if not response or not hasattr(response, 'data') or not response.data:
            logger.warning("No image data returned from API")
            return [], "No images were generated by the AI service"
        
        # Extract URLs from response
        image_urls_list = []
        for i, image_object in enumerate(response.data):
            if hasattr(image_object, 'url') and image_object.url and image_object.url.startswith("https://"):
                image_urls_list.append(image_object.url)
                logger.info(f"Generated image {i+1}: {image_object.url}")
            else:
                logger.warning(f"Image object {i} has no valid HTTPS URL. Skipping.")
        
        if image_urls_list:
            logger.info(f"Successfully generated {len(image_urls_list)} images")
            return image_urls_list, None
        else:
            logger.error("No valid image URLs were returned")
            return [], "No valid images were generated"
        
    except Exception as e:
        logger.error(f"Error in generate_images_standalone: {e}")
        return [], f"Image generation failed: {str(e)}"

def clean_prompt(prompt: str, style: str = 'default') -> str:
    """Clean and enhance the prompt based on style"""
    prompt = prompt.strip()
    
    # Style-specific enhancements
    style_prefixes = {
        'photorealistic': 'photorealistic, highly detailed, professional photography, ',
        'artistic': 'artistic, creative, expressive, ',
        'anime': 'anime style, manga style, ',
        'cartoon': 'cartoon style, animated, colorful, ',
        'digital-art': 'digital art, concept art, trending on artstation, ',
        'painting': 'oil painting, traditional art, brushstrokes, ',
        'sketch': 'pencil sketch, hand drawn, artistic sketch, '
    }
    
    if style in style_prefixes:
        prompt = style_prefixes[style] + prompt
    
    # Add quality enhancers
    quality_suffix = ', high quality, detailed, 4k resolution'
    if not any(term in prompt.lower() for term in ['quality', 'detailed', '4k', 'hd']):
        prompt += quality_suffix
    
    return prompt

@app.route('/')
def index():
    """Serve the main page - serverless compatible"""
    try:
        # Use a simple HTML template instead of file reading
        html_content = """<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AdvAI Image Generator</title>
    <link rel="stylesheet" href="/static/css/style.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
</head>
<body>
    <div class="container">
        <header class="header">
            <div class="header-content">
                <div class="logo">
                    <div class="logo-icon">
                        <i class="fas fa-robot"></i>
                    </div>
                    <div class="logo-text">
                        <h1>AdvAI Image Generator</h1>
                        <span class="logo-subtitle">Powered by Advanced AI</span>
                    </div>
                </div>
                <nav class="nav">
                    <div class="nav-buttons">
                        <button class="nav-btn active" data-tab="generate">
                            <i class="fas fa-magic"></i>
                            Generate
                        </button>
                        <button class="nav-btn" data-tab="history">
                            <i class="fas fa-history"></i>
                            History
                        </button>
                    </div>
                    <div class="nav-controls">
                        <button class="clear-data-btn" id="clearDataBtn" title="Clear all saved data">
                            <i class="fas fa-broom"></i>
                        </button>
                        <button class="theme-toggle" id="themeToggle" title="Toggle theme">
                            <i class="fas fa-moon"></i>
                        </button>
                        <a href="https://t.me/AdvChatGptBot" target="_blank" class="telegram-link" title="Open Telegram Bot">
                            <i class="fab fa-telegram"></i>
                        </a>
                    </div>
                </nav>
            </div>
        </header>
        <main class="main">
            <div class="tab-content active" id="generate">
                <div class="generate-section">
                    <div class="input-section">
                        <h2>Create Amazing Images with AI</h2>
                        <p class="subtitle">Describe what you want to see and let AI bring it to life</p>
                        
                        <div class="input-group enhanced">
                            <label for="description">
                                <i class="fas fa-pen-fancy"></i>
                                Image Description
                            </label>
                            <div class="textarea-wrapper">
                                <textarea 
                                    id="description" 
                                    placeholder="e.g., A futuristic city at sunset with flying cars and neon lights, vibrant colors, cinematic lighting"
                                    rows="4"
                                ></textarea>
                                <div class="textarea-overlay">
                                    <div class="char-count">0/500</div>
                                </div>
                            </div>
                            <div class="input-actions enhanced">
                                <button class="enhance-btn premium" id="enhanceBtn">
                                    <i class="fas fa-sparkles"></i>
                                    <span>Enhance Prompt</span>
                                    <div class="btn-shine"></div>
                                </button>
                                <div class="input-tips">
                                    <i class="fas fa-lightbulb"></i>
                                    <span>Tip: Be specific about style, lighting, and mood for better results</span>
                                </div>
                            </div>
                        </div>

                        <div class="settings-grid">
                            <div class="setting-group">
                                <label><i class="fas fa-palette"></i> Style</label>
                                <select id="styleSelect">
                                    <option value="default">Default</option>
                                    <option value="photorealistic">Photorealistic</option>
                                    <option value="artistic">Artistic</option>
                                    <option value="anime">Anime</option>
                                    <option value="cartoon">Cartoon</option>
                                    <option value="digital-art">Digital Art</option>
                                    <option value="painting">Painting</option>
                                    <option value="sketch">Sketch</option>
                                </select>
                            </div>

                            <div class="setting-group">
                                <label><i class="fas fa-brain"></i> AI Model</label>
                                <select id="modelSelect">
                                    <option value="flux">Flux</option>
                                    <option value="flux-pro">Flux Pro</option>
                                    <option value="dall-e-3">DALL-E 3</option>
                                </select>
                            </div>

                            <div class="setting-group">
                                <label><i class="fas fa-expand-arrows-alt"></i> Image Size</label>
                                <select id="sizeSelect">
                                    <option value="1024x1024">Square (1024×1024)</option>
                                    <option value="1536x1024">Wide (1536×1024)</option>
                                    <option value="1024x1536">Tall (1024×1536)</option>
                                    <option value="512x512">Small (512×512)</option>
                                    <option value="custom">Custom Size</option>
                                </select>
                                <div class="custom-size-inputs" id="customSizeInputs" style="display: none;">
                                    <div class="size-input-group">
                                        <label for="customWidth">Width</label>
                                        <input type="number" id="customWidth" placeholder="640" min="256" max="2048" value="1024">
                                    </div>
                                    <div class="size-input-group">
                                        <label for="customHeight">Height</label>
                                        <input type="number" id="customHeight" placeholder="360" min="256" max="2048" value="1024">
                                    </div>
                                </div>
                            </div>

                            <div class="setting-group">
                                <label><i class="fas fa-images"></i> Number of Images</label>
                                <div class="variant-options">
                                    <button class="variant-btn active" data-variants="1">1</button>
                                    <button class="variant-btn" data-variants="2">2</button>
                                    <button class="variant-btn" data-variants="4">4</button>
                                </div>
                            </div>
                        </div>

                        <button class="generate-btn" id="generateBtn">
                            <i class="fas fa-magic"></i>
                            Generate Images
                        </button>
                    </div>

                    <div class="results-section" id="resultsSection">
                        <div class="results-header">
                            <h3>Generated Images</h3>
                            <div class="results-actions">
                                <button class="action-btn" id="downloadAllBtn">
                                    <i class="fas fa-download"></i>
                                    Download All
                                </button>
                                <button class="action-btn" id="saveToHistoryBtn">
                                    <i class="fas fa-save"></i>
                                    Save to History
                                </button>
                            </div>
                        </div>
                        <div class="results-grid" id="resultsGrid">
                        </div>
                    </div>

                    <div class="loading-overlay" id="loadingOverlay">
                        <div class="loading-content">
                            <div class="spinner"></div>
                            <h3>Generating your images...</h3>
                            <p>This may take a few moments</p>
                            <div class="progress-bar">
                                <div class="progress-fill" id="progressFill"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="tab-content" id="history">
                <div class="history-section">
                    <div class="history-header">
                        <h2>Generation History</h2>
                        <div class="history-actions">
                            <button class="action-btn" id="clearHistoryBtn">
                                <i class="fas fa-trash"></i>
                                Clear History
                            </button>
                        </div>
                    </div>
                    <div class="history-grid" id="historyGrid">
                        <div class="empty-state">
                            <i class="fas fa-history"></i>
                            <h3>No history yet</h3>
                            <p>Generated images will appear here</p>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <!-- Image Modal/Popup -->
    <div class="image-modal" id="imageModal">
        <div class="modal-content">
            <button class="modal-close" id="modalClose">
                <i class="fas fa-times"></i>
            </button>
            
            <div class="modal-actions">
                <a class="modal-action-btn download" id="modalDownload" title="Download">
                    <i class="fas fa-download"></i>
                </a>
                <button class="modal-action-btn share" id="modalShare" title="Share">
                    <i class="fas fa-share"></i>
                </button>
            </div>
            
            <div class="modal-counter" id="modalCounter">1 / 1</div>
            
            <img class="modal-image" id="modalImage" src="" alt="Generated image">
            
            <button class="modal-nav prev" id="modalPrev" title="Previous image">
                <i class="fas fa-chevron-left"></i>
            </button>
            <button class="modal-nav next" id="modalNext" title="Next image">
                <i class="fas fa-chevron-right"></i>
            </button>
            
            <div class="modal-info">
                <div class="modal-prompt" id="modalPrompt"></div>
                <div class="modal-details">
                    <div class="modal-detail">
                        <i class="fas fa-expand-arrows-alt"></i>
                        <span id="modalSize"></span>
                    </div>
                    <div class="modal-detail">
                        <i class="fas fa-palette"></i>
                        <span id="modalStyle"></span>
                    </div>
                    <div class="modal-detail">
                        <i class="fas fa-brain"></i>
                        <span id="modalModel"></span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="/static/js/app.js"></script>
</body>
</html>"""
        return Response(html_content, mimetype='text/html')
    except Exception as e:
        logger.error(f"Error serving index: {e}")
        return f"<h1>AdvAI Image Generator</h1><p>Service starting...</p><p>Error: {str(e)}</p>", 500

@app.route('/static/<path:filename>')
def serve_static(filename):
    """Serve static files"""
    try:
        return send_from_directory('static', filename)
    except Exception as e:
        logger.error(f"Error serving static file {filename}: {e}")
        return "File not found", 404

@app.route('/api/enhance-prompt', methods=['POST'])
def enhance_prompt():
    """Enhance a user prompt using AI"""
    try:
        data = request.get_json()
        original_prompt = data.get('prompt', '').strip()
        
        if not original_prompt:
            return jsonify({'error': 'Prompt is required'}), 400
        
        if len(original_prompt) > 500:
            return jsonify({'error': 'Prompt is too long'}), 400
        
        # AI prompt enhancement
        enhancement_prompt = f"""
        You are an expert at creating detailed, creative image generation prompts. 
        Enhance the following prompt to be more detailed, vivid, and likely to produce a stunning AI-generated image.
        
        Original prompt: "{original_prompt}"
        
        Please provide an enhanced version that:
        - Adds more visual details and descriptions
        - Includes artistic style suggestions
        - Adds lighting, mood, and atmosphere details
        - Keeps the core concept intact
        - Is suitable for AI image generation
        - Is no more than 400 characters
        
        Enhanced prompt:"""
        
        try:
            enhanced = generate_ai_response(enhancement_prompt)
            
            # Clean up the response
            enhanced = enhanced.strip()
            if enhanced.startswith('"') and enhanced.endswith('"'):
                enhanced = enhanced[1:-1]
            
            # Ensure it's not too long
            if len(enhanced) > 500:
                enhanced = enhanced[:497] + "..."
            
            return jsonify({
                'original_prompt': original_prompt,
                'enhanced_prompt': enhanced
            })
            
        except Exception as e:
            logger.error(f"Error enhancing prompt with AI: {e}")
            # Fallback enhancement
            enhanced = f"detailed, high quality, {original_prompt}, professional lighting, stunning composition"
            return jsonify({
                'original_prompt': original_prompt,
                'enhanced_prompt': enhanced
            })
        
    except Exception as e:
        logger.error(f"Error in enhance_prompt: {e}")
        return jsonify({'error': 'Failed to enhance prompt'}), 500

@app.route('/api/generate', methods=['POST'])
def generate_images_api():
    """Generate images based on prompt and settings"""
    try:
        # Get form data
        description = request.form.get('description', '').strip()
        size = request.form.get('size', '1024x1024')
        variants = int(request.form.get('variants', 1))
        style = request.form.get('style', 'default')
        model = request.form.get('model', 'flux')
        
        # Validate input
        if not description:
            return jsonify({'error': 'Description is required'}), 400
        
        if len(description) > 500:
            return jsonify({'error': 'Description is too long (max 500 characters)'}), 400
        
        if variants not in [1, 2, 4]:
            return jsonify({'error': 'Invalid number of variants'}), 400
        
        if model not in ['flux', 'flux-pro', 'dall-e-3']:
            return jsonify({'error': 'Invalid model selection'}), 400
        
        # Parse width and height from size string
        try:
            width, height = map(int, size.split('x'))
            if width < 256 or height < 256 or width > 2048 or height > 2048:
                return jsonify({'error': 'Invalid image dimensions'}), 400
        except ValueError:
            return jsonify({'error': 'Invalid image size format'}), 400
        
        # Clean and enhance the prompt
        enhanced_prompt = clean_prompt(description, style)
        
        logger.info(f"Generating {variants} image(s) with prompt: {enhanced_prompt}")
        
        # Generate images using standalone function
        try:
            # Use asyncio.run for serverless compatibility
            generated_urls, error = asyncio.run(generate_images_standalone(
                prompt=enhanced_prompt,
                style=style if style != 'default' else None,
                max_images=variants,
                width=width,
                height=height,
                model=model
            ))
            
            if error:
                logger.error(f"Image generation error: {error}")
                return jsonify({'error': f'Image generation failed: {error}'}), 500
            
            if not generated_urls:
                logger.error("No images generated")
                return jsonify({'error': 'No images were generated'}), 500
            
            # Format response
            images = []
            for i, url in enumerate(generated_urls):
                images.append({
                    'url': url,
                    'id': f"{uuid.uuid4().hex}",
                    'prompt': enhanced_prompt,
                    'size': size,
                    'style': style,
                    'model': model,
                    'index': i
                })
            
            return jsonify({
                'success': True,
                'images': images,
                'prompt': enhanced_prompt,
                'original_prompt': description,
                'settings': {
                    'size': size,
                    'variants': variants,
                    'style': style,
                    'model': model
                }
            })
            
        except Exception as e:
            logger.error(f"Error generating images: {e}")
            return jsonify({'error': 'Image generation service temporarily unavailable'}), 500
        
    except Exception as e:
        logger.error(f"Unexpected error in generate_images_api: {e}")
        return jsonify({'error': 'Internal server error'}), 500

@app.route('/api/health', methods=['GET'])
def health_check():
    """Health check endpoint"""
    return jsonify({
        'status': 'healthy',
        'service': 'AdvAI Image Generator',
        'timestamp': datetime.now().isoformat(),
        'api_configured': bool(POLLINATIONS_KEY)
    })

@app.route('/api/stats', methods=['GET'])
def get_stats():
    """Get service statistics"""
    return jsonify({
        'total_generations': 0,
        'active_users': 0,
        'available_models': ['Flux', 'Flux Pro', 'DALL-E 3'],
        'supported_sizes': ['1024x1024', '1536x1024', '1024x1536', '512x512'],
        'max_variants': 4,
        'service_status': 'operational'
    })

@app.errorhandler(404)
def not_found(error):
    """Handle 404 errors"""
    return jsonify({'error': 'Endpoint not found'}), 404

@app.errorhandler(500)
def internal_error(error):
    """Handle 500 errors"""
    logger.error(f"Internal server error: {error}")
    return jsonify({'error': 'Internal server error'}), 500

# Serverless entry point
def run_app():
    """Run the Flask application"""
    port = int(os.environ.get('PORT', 5000))
    debug = os.environ.get('DEBUG', 'False').lower() == 'true'
    
    logger.info(f"Starting AdvAI Image Generator Web App on port {port}")
    logger.info(f"Debug mode: {debug}")
    logger.info(f"API Key configured: {bool(POLLINATIONS_KEY)}")
    
    app.run(
        host='0.0.0.0',
        port=port,
        debug=debug,
        threaded=True
    )

if __name__ == '__main__':
    run_app() 