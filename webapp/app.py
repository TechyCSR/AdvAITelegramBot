#!/usr/bin/env python3
"""
AdvAI Image Generator Web Application
Flask backend server with g4f integration
"""

import os
import sys
import asyncio
import logging
import uuid
import base64
from datetime import datetime
from typing import List, Dict, Any, Optional
from pathlib import Path

# Add parent directory to path to import from bot modules
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Import config for API keys
from config import POLLINATIONS_KEY

from flask import Flask, request, jsonify, send_from_directory, render_template
from flask_cors import CORS

# Import g4f directly
import g4f
from g4f.client import Client as GPTClient, AsyncClient
from g4f.Provider import PollinationsImage


# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize Flask app
app = Flask(__name__, 
           static_folder='static', 
           template_folder='.')
CORS(app)

# Configuration  
app.config['GENERATED_FOLDER'] = 'static/generated'

# Ensure directories exist
os.makedirs(app.config['GENERATED_FOLDER'], exist_ok=True)



def generate_ai_response(prompt: str, model: str = "gpt-4o") -> str:
    """Generate AI response using g4f GPTClient - same method as bot"""
    try:
        # Use the exact same method as the bot
        gpt_client = GPTClient()
        history = [{"role": "user", "content": prompt}]
        
        response = gpt_client.chat.completions.create(
            api_key=POLLINATIONS_KEY,  # Add API key to the request
            model=model,
            messages=history,
            provider="PollinationsAI"
        )
        return response.choices[0].message.content
    except Exception as e:
        logger.error(f"Error generating AI response: {e}")
        raise

async def generate_images_standalone(prompt: str, style: str = None, max_images: int = 1, width: int = 1024, height: int = 1024, model: str = "flux") -> tuple:
    """Generate images using g4f directly - same method as bot"""
    try:
        # Style definitions matching the bot
        style_definitions = {
            "default": {"prompt_additions": "ultra realistic, detailed, photographic quality"},
            "photorealistic": {"prompt_additions": "photorealistic, ultra realistic, detailed, professional photography"},
            "artistic": {"prompt_additions": "artistic, creative, expressive, painterly style"},
            "anime": {"prompt_additions": "anime style, manga style, vibrant colors"},
            "cartoon": {"prompt_additions": "cartoon style, animated, colorful, stylized"},
            "digital-art": {"prompt_additions": "digital art, concept art, trending on artstation"},
            "painting": {"prompt_additions": "oil painting, traditional art, brushstrokes, artistic"},
            "sketch": {"prompt_additions": "pencil sketch, hand drawn, artistic sketch, detailed drawing"}
        }
        
        # Get style info and enhance prompt
        style_info = style_definitions.get(style or "default", style_definitions["default"])
        enhanced_prompt = f"{prompt}, {style_info['prompt_additions']}"
        
        logger.info(f"Generating {max_images} images with enhanced prompt: {enhanced_prompt[:100]}...")
        
        # Use AsyncClient with PollinationsImage provider (same as bot)
        async_client = AsyncClient(image_provider=PollinationsImage, api_key=POLLINATIONS_KEY)
        
        # Generate images using the same method as the bot
        response = await async_client.images.generate(
            prompt=enhanced_prompt,
            model=model,
            response_format="url",
            width=width,
            height=height,
            n=max_images,
        )
        
        # Check if response is valid
        if not response or not hasattr(response, 'data') or not response.data:
            logger.warning("No image data returned from API")
            return [], "No images were generated by the AI service"
        
        # Extract URLs from response (same as bot)
        image_urls_list = []
        for i, image_object in enumerate(response.data):
            if hasattr(image_object, 'url') and image_object.url and image_object.url.startswith("https://"):
                image_urls_list.append(image_object.url)
                logger.info(f"Generated image {i+1}: {image_object.url}")
            else:
                logger.warning(f"Image object {i} has no valid HTTPS URL. Skipping.")
        
        if image_urls_list:
            logger.info(f"Successfully generated {len(image_urls_list)} images")
            return image_urls_list, None
        else:
            logger.error("No valid image URLs were returned")
            return [], "No valid images were generated"
        
    except Exception as e:
        logger.error(f"Error in generate_images_standalone: {e}")
        return [], f"Image generation failed: {str(e)}"

def clean_prompt(prompt: str, style: str = 'default') -> str:
    """Clean and enhance the prompt based on style"""
    prompt = prompt.strip()
    
    # Style-specific enhancements
    style_prefixes = {
        'photorealistic': 'photorealistic, highly detailed, professional photography, ',
        'artistic': 'artistic, creative, expressive, ',
        'anime': 'anime style, manga style, ',
        'cartoon': 'cartoon style, animated, colorful, ',
        'digital-art': 'digital art, concept art, trending on artstation, ',
        'painting': 'oil painting, traditional art, brushstrokes, ',
        'sketch': 'pencil sketch, hand drawn, artistic sketch, '
    }
    
    if style in style_prefixes:
        prompt = style_prefixes[style] + prompt
    
    # Add quality enhancers
    quality_suffix = ', high quality, detailed, 4k resolution'
    if not any(term in prompt.lower() for term in ['quality', 'detailed', '4k', 'hd']):
        prompt += quality_suffix
    
    return prompt

@app.route('/')
def index():
    """Serve the main page"""
    return send_from_directory('.', 'index.html')

@app.route('/api/enhance-prompt', methods=['POST'])
def enhance_prompt():
    """Enhance a user prompt using AI"""
    try:
        data = request.get_json()
        original_prompt = data.get('prompt', '').strip()
        
        if not original_prompt:
            return jsonify({'error': 'Prompt is required'}), 400
        
        if len(original_prompt) > 500:
            return jsonify({'error': 'Prompt is too long'}), 400
        
        # AI prompt enhancement
        enhancement_prompt = f"""
        You are an expert at creating detailed, creative image generation prompts. 
        Enhance the following prompt to be more detailed, vivid, and likely to produce a stunning AI-generated image.
        
        Original prompt: "{original_prompt}"
        
        Please provide an enhanced version that:
        - Adds more visual details and descriptions
        - Includes artistic style suggestions
        - Adds lighting, mood, and atmosphere details
        - Keeps the core concept intact
        - Is suitable for AI image generation
        - Is no more than 400 characters
        
        Enhanced prompt:"""
        
        try:
            # Use standalone AI response function (now synchronous)
            enhanced = generate_ai_response(enhancement_prompt)
            
            # Clean up the response
            enhanced = enhanced.strip()
            if enhanced.startswith('"') and enhanced.endswith('"'):
                enhanced = enhanced[1:-1]
            
            # Ensure it's not too long
            if len(enhanced) > 500:
                enhanced = enhanced[:497] + "..."
            
            return jsonify({
                'original_prompt': original_prompt,
                'enhanced_prompt': enhanced
            })
            
        except Exception as e:
            logger.error(f"Error enhancing prompt with AI: {e}")
            # Fallback enhancement
            enhanced = f"detailed, high quality, {original_prompt}, professional lighting, stunning composition"
            return jsonify({
                'original_prompt': original_prompt,
                'enhanced_prompt': enhanced
            })
        
    except Exception as e:
        logger.error(f"Error in enhance_prompt: {e}")
        return jsonify({'error': 'Failed to enhance prompt'}), 500

@app.route('/api/generate', methods=['POST'])
def generate_images_api():
    """Generate images based on prompt and settings"""
    try:
        # Get form data
        description = request.form.get('description', '').strip()
        size = request.form.get('size', '1024x1024')
        variants = int(request.form.get('variants', 1))
        style = request.form.get('style', 'default')
        model = request.form.get('model', 'flux')
        
        # Validate input
        if not description:
            return jsonify({'error': 'Description is required'}), 400
        
        if len(description) > 500:
            return jsonify({'error': 'Description is too long (max 500 characters)'}), 400
        
        if variants not in [1, 2, 4]:
            return jsonify({'error': 'Invalid number of variants'}), 400
        
        if model not in ['flux', 'flux-pro', 'dall-e-3']:
            return jsonify({'error': 'Invalid model selection'}), 400
        
        # Parse width and height from size string
        try:
            width, height = map(int, size.split('x'))
            if width < 256 or height < 256 or width > 2048 or height > 2048:
                return jsonify({'error': 'Invalid image dimensions'}), 400
        except ValueError:
            return jsonify({'error': 'Invalid image size format'}), 400
        

        
        # Clean and enhance the prompt
        enhanced_prompt = clean_prompt(description, style)
        
        logger.info(f"Generating {variants} image(s) with prompt: {enhanced_prompt}")
        
        # Generate images using standalone function
        try:
            # Use standalone image generation function with width and height
            generated_urls, error = asyncio.run(generate_images_standalone(
                prompt=enhanced_prompt,
                style=style if style != 'default' else None,
                max_images=variants,
                width=width,
                height=height,
                model=model
            ))
            
            if error:
                logger.error(f"Image generation error: {error}")
                return jsonify({'error': f'Image generation failed: {error}'}), 500
            
            if not generated_urls:
                logger.error("No images generated")
                return jsonify({'error': 'No images were generated'}), 500
            
            # Format response
            images = []
            for i, url in enumerate(generated_urls):
                images.append({
                    'url': url,
                    'id': f"{uuid.uuid4().hex}",
                    'prompt': enhanced_prompt,
                    'size': size,
                    'style': style,
                    'model': model,
                    'index': i
                })
            

            
            return jsonify({
                'success': True,
                'images': images,
                'prompt': enhanced_prompt,
                'original_prompt': description,
                'settings': {
                    'size': size,
                    'variants': variants,
                    'style': style,
                    'model': model
                }
            })
            
        except Exception as e:
            logger.error(f"Error generating images: {e}")
            return jsonify({'error': 'Image generation service temporarily unavailable'}), 500
        
    except Exception as e:
        logger.error(f"Unexpected error in generate_images_api: {e}")
        return jsonify({'error': 'Internal server error'}), 500

@app.route('/api/health', methods=['GET'])
def health_check():
    """Health check endpoint"""
    return jsonify({
        'status': 'healthy',
        'service': 'AdvAI Image Generator',
        'timestamp': datetime.now().isoformat()
    })

@app.route('/api/stats', methods=['GET'])
def get_stats():
    """Get service statistics"""
    return jsonify({
        'total_generations': 0,  # Could track this in database
        'active_users': 0,       # Could track this in database
        'available_models': ['Flux', 'Flux Pro', 'DALL-E 3'],
        'supported_sizes': ['1024x1024', '1536x1024', '1024x1536', '512x512'],
        'max_variants': 4,
        'service_status': 'operational'
    })

@app.errorhandler(404)
def not_found(error):
    """Handle 404 errors"""
    return jsonify({'error': 'Endpoint not found'}), 404

@app.errorhandler(500)
def internal_error(error):
    """Handle 500 errors"""
    logger.error(f"Internal server error: {error}")
    return jsonify({'error': 'Internal server error'}), 500



def run_app():
    """Run the Flask application"""
    port = int(os.environ.get('PORT', 5000))
    debug = os.environ.get('DEBUG', 'False').lower() == 'true'
    
    logger.info(f"Starting AdvAI Image Generator Web App on port {port}")
    logger.info(f"Debug mode: {debug}")
    
    app.run(
        host='0.0.0.0',
        port=port,
        debug=debug,
        threaded=True
    )

if __name__ == '__main__':
    run_app() 